{"ast":null,"code":"const API_URL = process.env.WP_API_URL;\n\nasync function fetchAPI(query, {\n  variables\n} = {}) {\n  const headers = {\n    \"Content-Type\": \"application/json\"\n  };\n  const res = await fetch(API_URL, {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify({\n      query,\n      variables\n    })\n  });\n  const json = await res.json();\n\n  if (json.errors) {\n    console.log(json.errors);\n    console.log(\"error details\", query, variables);\n    throw new Error(\"Failed to fetch API\");\n  }\n\n  return json.data;\n}\n\nexport async function getAllPosts(preview) {\n  const data = await fetchAPI(`\n    query MyQuery {\n      posts(first: 20, where: {orderby: {field: DATE, order: DESC}}) {\n        edges {\n          node {\n            id\n            date\n            title\n            slug\n            extraPostInfo {\n              authorExcerpt\n              thumbImage {\n                mediaItemUrl\n              }\n            }\n          }\n        }\n      }\n    }  \n\n      `);\n  return data === null || data === void 0 ? void 0 : data.posts;\n}\nexport async function getAllPostsWithSlug() {\n  const data = await fetchAPI(`\n      {\n        posts(first: 10000) {\n          edges {\n            node {\n              slug\n            }\n          }\n        }\n      }\n    `);\n  return data === null || data === void 0 ? void 0 : data.posts;\n}\nexport async function getPost(slug) {\n  const data = await fetchAPI(`\n      fragment PostFields on Post {\n        title\n        excerpt\n        slug\n        date\n        featuredImage {\n          node {\n            id\n            sourceUrl\n          }\n        }\n      }\n      query PostBySlug($id: ID!, $idType: PostIdType!) {\n        post(id: $id, idType: $idType) {\n          ...PostFields\n          content\n        }\n      }\n    `, {\n    variables: {\n      id: slug,\n      idType: \"SLUG\"\n    }\n  });\n  return data;\n}","map":{"version":3,"sources":["/Users/markwlodawski/dev/next/lib/api.js"],"names":["API_URL","process","env","WP_API_URL","fetchAPI","query","variables","headers","res","fetch","method","body","JSON","stringify","json","errors","console","log","Error","data","getAllPosts","preview","posts","getAllPostsWithSlug","getPost","slug","id","idType"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,UAA5B;;AAEA,eAAeC,QAAf,CAAwBC,KAAxB,EAA+B;AAAEC,EAAAA;AAAF,IAAgB,EAA/C,EAAmD;AACjD,QAAMC,OAAO,GAAG;AAAE,oBAAgB;AAAlB,GAAhB;AACA,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAACT,OAAD,EAAU;AAC/BU,IAAAA,MAAM,EAAE,MADuB;AAE/BH,IAAAA,OAF+B;AAG/BI,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAER,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAf;AAHyB,GAAV,CAAvB;AAMA,QAAMQ,IAAI,GAAG,MAAMN,GAAG,CAACM,IAAJ,EAAnB;;AACA,MAAIA,IAAI,CAACC,MAAT,EAAiB;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACC,MAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BZ,KAA7B,EAAoCC,SAApC;AACA,UAAM,IAAIY,KAAJ,CAAU,qBAAV,CAAN;AACD;;AACD,SAAOJ,IAAI,CAACK,IAAZ;AACD;;AACD,OAAO,eAAeC,WAAf,CAA2BC,OAA3B,EAAoC;AACzC,QAAMF,IAAI,GAAG,MAAMf,QAAQ,CACxB;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OArB6B,CAA3B;AAwBA,SAAOe,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAEG,KAAb;AACD;AAED,OAAO,eAAeC,mBAAf,GAAqC;AAC1C,QAAMJ,IAAI,GAAG,MAAMf,QAAQ,CACxB;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAX6B,CAA3B;AAaA,SAAOe,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAEG,KAAb;AACD;AAED,OAAO,eAAeE,OAAf,CAAuBC,IAAvB,EAA6B;AAClC,QAAMN,IAAI,GAAG,MAAMf,QAAQ,CACxB;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KApB6B,EAqBzB;AACEE,IAAAA,SAAS,EAAE;AACToB,MAAAA,EAAE,EAAED,IADK;AAETE,MAAAA,MAAM,EAAE;AAFC;AADb,GArByB,CAA3B;AA6BA,SAAOR,IAAP;AACD","sourcesContent":["const API_URL = process.env.WP_API_URL;\r\n\r\nasync function fetchAPI(query, { variables } = {}) {\r\n  const headers = { \"Content-Type\": \"application/json\" };\r\n  const res = await fetch(API_URL, {\r\n    method: \"POST\",\r\n    headers,\r\n    body: JSON.stringify({ query, variables }),\r\n  });\r\n\r\n  const json = await res.json();\r\n  if (json.errors) {\r\n    console.log(json.errors);\r\n    console.log(\"error details\", query, variables);\r\n    throw new Error(\"Failed to fetch API\");\r\n  }\r\n  return json.data;\r\n}\r\nexport async function getAllPosts(preview) {\r\n  const data = await fetchAPI(\r\n    `\r\n    query MyQuery {\r\n      posts(first: 20, where: {orderby: {field: DATE, order: DESC}}) {\r\n        edges {\r\n          node {\r\n            id\r\n            date\r\n            title\r\n            slug\r\n            extraPostInfo {\r\n              authorExcerpt\r\n              thumbImage {\r\n                mediaItemUrl\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }  \r\n\r\n      `\r\n  );\r\n\r\n  return data?.posts;\r\n}\r\n\r\nexport async function getAllPostsWithSlug() {\r\n  const data = await fetchAPI(\r\n    `\r\n      {\r\n        posts(first: 10000) {\r\n          edges {\r\n            node {\r\n              slug\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  );\r\n  return data?.posts;\r\n}\r\n\r\nexport async function getPost(slug) {\r\n  const data = await fetchAPI(\r\n    `\r\n      fragment PostFields on Post {\r\n        title\r\n        excerpt\r\n        slug\r\n        date\r\n        featuredImage {\r\n          node {\r\n            id\r\n            sourceUrl\r\n          }\r\n        }\r\n      }\r\n      query PostBySlug($id: ID!, $idType: PostIdType!) {\r\n        post(id: $id, idType: $idType) {\r\n          ...PostFields\r\n          content\r\n        }\r\n      }\r\n    `,\r\n    {\r\n      variables: {\r\n        id: slug,\r\n        idType: \"SLUG\",\r\n      },\r\n    }\r\n  );\r\n\r\n  return data;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}