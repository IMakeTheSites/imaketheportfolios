{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar API_URL = process.env.WP_API_URL;\n\nfunction fetchAPI(_x) {\n  return _fetchAPI.apply(this, arguments);\n}\n\nfunction _fetchAPI() {\n  _fetchAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query) {\n    var _ref,\n        variables,\n        headers,\n        res,\n        json,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref = _args.length > 1 && _args[1] !== undefined ? _args[1] : {}, variables = _ref.variables;\n            headers = {\n              'Content-Type': 'application/json'\n            };\n            _context.next = 4;\n            return fetch(API_URL, {\n              method: 'POST',\n              headers: headers,\n              body: JSON.stringify({\n                query: query,\n                variables: variables\n              })\n            });\n\n          case 4:\n            res = _context.sent;\n            _context.next = 7;\n            return res.json();\n\n          case 7:\n            json = _context.sent;\n\n            if (!json.errors) {\n              _context.next = 12;\n              break;\n            }\n\n            console.log(json.errors);\n            console.log('error details', query, variables);\n            throw new Error('Failed to fetch API');\n\n          case 12:\n            return _context.abrupt(\"return\", json.data);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchAPI.apply(this, arguments);\n}\n\nexport function getAllPosts(_x2) {\n  return _getAllPosts.apply(this, arguments);\n}\n\nfunction _getAllPosts() {\n  _getAllPosts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(preview) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetchAPI(\"\\n    query MyQuery {\\n      posts(first: 20, where: {orderby: {field: DATE, order: DESC}}) {\\n        edges {\\n          node {\\n            id\\n            date\\n            title\\n            slug\\n            extraPostInfo {\\n              authorExcerpt\\n              thumbImage {\\n                mediaItemUrl\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }  \\n\\n      \");\n\n          case 2:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", data === null || data === void 0 ? void 0 : data.posts);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getAllPosts.apply(this, arguments);\n}\n\nexport function getAllPostsWithSlug() {\n  return _getAllPostsWithSlug.apply(this, arguments);\n}\n\nfunction _getAllPostsWithSlug() {\n  _getAllPostsWithSlug = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return fetchAPI(\"\\n      {\\n        posts(first: 10000) {\\n          edges {\\n            node {\\n              slug\\n            }\\n          }\\n        }\\n      }\\n    \");\n\n          case 2:\n            data = _context3.sent;\n            return _context3.abrupt(\"return\", data === null || data === void 0 ? void 0 : data.posts);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getAllPostsWithSlug.apply(this, arguments);\n}\n\nexport function getPost(_x3) {\n  return _getPost.apply(this, arguments);\n}\n\nfunction _getPost() {\n  _getPost = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(slug) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return fetchAPI(\"\\n      fragment PostFields on Post {\\n        title\\n        excerpt\\n        slug\\n        date\\n        featuredImage {\\n          node {\\n            sourceUrl\\n          }\\n        }\\n      }\\n      query PostBySlug($id: ID!, $idType: PostIdType!) {\\n        post(id: $id, idType: $idType) {\\n          ...PostFields\\n          content\\n        }\\n      }\\n    \", {\n              variables: {\n                id: slug,\n                idType: 'SLUG'\n              }\n            });\n\n          case 2:\n            data = _context4.sent;\n            return _context4.abrupt(\"return\", data);\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getPost.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/Mark/dev/IMTS-Blog/imts-blogg/imts-blogg/lib/api.js"],"names":["API_URL","process","env","WP_API_URL","fetchAPI","query","variables","headers","fetch","method","body","JSON","stringify","res","json","errors","console","log","Error","data","getAllPosts","preview","posts","getAllPostsWithSlug","getPost","slug","id","idType"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,UAA5B;;SAEeC,Q;;;;;uEAAf,iBAAwBC,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,2EAA+C,EAA/C,EAAiCC,SAAjC,QAAiCA,SAAjC;AACQC,YAAAA,OADR,GACkB;AAAE,8BAAgB;AAAlB,aADlB;AAAA;AAAA,mBAEoBC,KAAK,CAACR,OAAD,EAAU;AAC/BS,cAAAA,MAAM,EAAE,MADuB;AAE/BF,cAAAA,OAAO,EAAPA,OAF+B;AAG/BG,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,gBAAAA,KAAK,EAALA,KAAF;AAASC,gBAAAA,SAAS,EAATA;AAAT,eAAf;AAHyB,aAAV,CAFzB;;AAAA;AAEQO,YAAAA,GAFR;AAAA;AAAA,mBAQqBA,GAAG,CAACC,IAAJ,EARrB;;AAAA;AAQQA,YAAAA,IARR;;AAAA,iBASMA,IAAI,CAACC,MATX;AAAA;AAAA;AAAA;;AAUIC,YAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACC,MAAjB;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BZ,KAA7B,EAAoCC,SAApC;AAXJ,kBAYU,IAAIY,KAAJ,CAAU,qBAAV,CAZV;;AAAA;AAAA,6CAcSJ,IAAI,CAACK,IAdd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAgBA,gBAAsBC,WAAtB;AAAA;AAAA;;;0EAAO,kBAA2BC,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACcjB,QAAQ,mZADtB;;AAAA;AACCe,YAAAA,IADD;AAAA,8CAyBEA,IAzBF,aAyBEA,IAzBF,uBAyBEA,IAAI,CAAEG,KAzBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA4BP,gBAAsBC,mBAAtB;AAAA;AAAA;;;kFAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACcnB,QAAQ,6JADtB;;AAAA;AACCe,YAAAA,IADD;AAAA,8CAcEA,IAdF,aAcEA,IAdF,uBAcEA,IAAI,CAAEG,KAdR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAiBP,gBAAsBE,OAAtB;AAAA;AAAA;;;sEAAO,kBAAuBC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACcrB,QAAQ,mXAoBzB;AACEE,cAAAA,SAAS,EAAE;AACToB,gBAAAA,EAAE,EAAED,IADK;AAETE,gBAAAA,MAAM,EAAE;AAFC;AADb,aApByB,CADtB;;AAAA;AACCR,YAAAA,IADD;AAAA,8CA6BEA,IA7BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["const API_URL = process.env.WP_API_URL;\r\n\r\nasync function fetchAPI(query, { variables } = {}) {\r\n  const headers = { 'Content-Type': 'application/json' };\r\n  const res = await fetch(API_URL, {\r\n    method: 'POST',\r\n    headers,\r\n    body: JSON.stringify({ query, variables }),\r\n  });\r\n\r\n  const json = await res.json();\r\n  if (json.errors) {\r\n    console.log(json.errors);\r\n    console.log('error details', query, variables);\r\n    throw new Error('Failed to fetch API');\r\n  }\r\n  return json.data;\r\n}\r\nexport async function getAllPosts(preview) {\r\n  const data = await fetchAPI(\r\n    `\r\n    query MyQuery {\r\n      posts(first: 20, where: {orderby: {field: DATE, order: DESC}}) {\r\n        edges {\r\n          node {\r\n            id\r\n            date\r\n            title\r\n            slug\r\n            extraPostInfo {\r\n              authorExcerpt\r\n              thumbImage {\r\n                mediaItemUrl\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }  \r\n\r\n      `\r\n  );\r\n\r\n  return data?.posts;\r\n}\r\n\r\nexport async function getAllPostsWithSlug() {\r\n  const data = await fetchAPI(\r\n    `\r\n      {\r\n        posts(first: 10000) {\r\n          edges {\r\n            node {\r\n              slug\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  );\r\n  return data?.posts;\r\n}\r\n\r\nexport async function getPost(slug) {\r\n  const data = await fetchAPI(\r\n    `\r\n      fragment PostFields on Post {\r\n        title\r\n        excerpt\r\n        slug\r\n        date\r\n        featuredImage {\r\n          node {\r\n            sourceUrl\r\n          }\r\n        }\r\n      }\r\n      query PostBySlug($id: ID!, $idType: PostIdType!) {\r\n        post(id: $id, idType: $idType) {\r\n          ...PostFields\r\n          content\r\n        }\r\n      }\r\n    `,\r\n    {\r\n      variables: {\r\n        id: slug,\r\n        idType: 'SLUG',\r\n      },\r\n    }\r\n  );\r\n\r\n  return data;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}